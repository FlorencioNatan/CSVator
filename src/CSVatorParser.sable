/* simpleAdder.sable - A very simple program that recognizes two integers being added. */
Package org.csvator.core ;

Helpers
	/* Our helpers */
	all = [0..0xffff];
	digit = ['0' .. '9'] ;
	sp = ' ' ;
	lf = 10 ;
	cr = 13 ;
	tab = 9;
	eol = cr lf | cr | lf;
	blank = cr lf | cr | lf| sp | tab;
	dot = '.';
	letter = [['a' .. 'z'] + ['A' .. 'Z']];
	not_eol = [all - [cr + lf]];
	string_char = [all - '"'];

Tokens
	/* Our simple token definition(s). */
	blank = blank;
	comment = 
		('//' not_eol* eol) |
		('#' not_eol* eol);
	kw_int = 'int';
	kw_bool = 'bool';
	kw_double = 'double';
	kw_string = 'string';
	kw_date = 'date';
	kw_datetime = 'datetime';
	kw_void = 'void';
	kw_any = 'any';
	integer = digit+;
	double =  digit+ dot digit+;
	kw_true = 'true';
	kw_false = 'false';
	tok_double_quote = '"';
	tok_plus_plus = '++';
	tok_min_min = '--';
	tok_excl_excl = '!!';
	tok_excl_gt = '!<';
	tok_excl_lt = '!>';
	tok_excl_nb = '!#';
	tok_plus = '+';
	tok_min = '-';
	tok_mult = '*';
	tok_div = '/';
	tok_op_paren = '(';
	tok_cl_paren = ')';
	tok_op_square = '[';
	tok_cl_square = ']';
	tok_greater = '>';
	tok_greater_equal = '>=';
	tok_less = '<';
	tok_less_equal = '<=';
	tok_equal = '=';
	tok_different = '<>';
	kw_and = 'and';
	kw_or = 'or';
	kw_xor = 'xor';
	kw_not = 'not';
	kw_implies = 'implies';
	kw_null = 'null';
	kw_vector = 'vector';
	kw_dict = 'dict';
	kw_set = 'set';
	kw_list = 'list';
	kw_swap = 'swap';
	kw_update = 'update';
	kw_map = 'map';
	kw_filter = 'filter';
	kw_reduce = 'reduce';
	tok_semicolon = ';';
	tok_colon = ':';
	tok_comma = ',';
	tok_right_arrow = '->';
	tok_attribution = ':=';
	tok_lambda = '\';
	tok_pipe = '|';
	identifier = letter (letter | '_')*;
	string_literal = '"' string_char* '"';

Ignored Tokens
	comment,
	blank;

Productions
	/* Our super-simple grammar */
	program = line* {-> New program([line])};

	line =
		{expression_line} expression tok_semicolon {-> New line.expression_line(expression)} |
		{function_definition} function_definition tok_semicolon {-> New line.function_definition(function_definition)} |
		{variable_definition} variable_definition tok_semicolon {-> New line.variable_definition(variable_definition)} ;

	expression {-> expression} = 
		{concat_expression} concat_expression {-> concat_expression.expression};

	concat_expression {-> expression} = 
		{concat} [left]:concat_expression tok_plus_plus [right]:not_expression {-> New expression.concat_expression(left.expression, right.expression)} |
		{remove} [left]:concat_expression tok_min_min [right]:not_expression {-> New expression.remove_expression(left.expression, right.expression)} |
		{index} [left]:concat_expression tok_excl_excl [right]:not_expression {-> New expression.index_expression(left.expression, right.expression)} |
		{not_expression} not_expression {-> not_expression.expression};

	not_expression {-> expression} =
		{not} kw_not not_expression {-> New expression.not(not_expression.expression)} |
		xor_expression {-> xor_expression.expression};

	xor_expression {-> expression} = 
		{xor} xor_expression kw_xor implies_expression {-> New expression.xor(xor_expression.expression, implies_expression.expression)} |
		implies_expression {-> implies_expression.expression};

	implies_expression {-> expression} = 
		{implies} implies_expression kw_implies or_expression {-> New expression.implies(implies_expression.expression, or_expression.expression)} |
		or_expression {-> or_expression.expression};

	or_expression {-> expression} =
		{or} or_expression kw_or and_expression {-> New expression.or(or_expression.expression, and_expression.expression)} |
		and_expression {-> and_expression.expression};

	and_expression {-> expression} =
		{and} and_expression kw_and equal_expression {-> New expression.and(and_expression.expression, equal_expression.expression)} |
		equal_expression {-> equal_expression.expression};

	equal_expression {-> expression} = 
		{equal} [left]:comparsion_expression tok_equal [right]:comparsion_expression {-> New expression.equal(left.expression, right.expression)} |
		{different} [left]:comparsion_expression tok_different [right]:comparsion_expression {-> New expression.different(left.expression, right.expression)} |
		comparsion_expression {-> comparsion_expression.expression};

	comparsion_expression {-> expression} = 
		{greater} [left]:aditive_expression tok_greater [right]:aditive_expression {-> New expression.greater(left.expression, right.expression)} |
		{greater_equal} [left]:aditive_expression tok_greater_equal [right]:aditive_expression {-> New expression.greater_equal(left.expression, right.expression)} |
		{less} [left]:aditive_expression tok_less [right]:aditive_expression {-> New expression.less(left.expression, right.expression)} |
		{less_equal} [left]:aditive_expression tok_less_equal [right]:aditive_expression {-> New expression.less_equal(left.expression, right.expression)} |
		aditive_expression {-> aditive_expression.expression};

	aditive_expression {-> expression} = 
		{sum} aditive_expression tok_plus multiplicative_expression {-> New expression.sum(aditive_expression.expression, multiplicative_expression.expression)} |
		{sub} aditive_expression tok_min multiplicative_expression {-> New expression.sub(aditive_expression.expression, multiplicative_expression.expression)} |
		{multiplicative_expression} multiplicative_expression {-> multiplicative_expression.expression};

	multiplicative_expression {-> expression} = 
		{mult} multiplicative_expression tok_mult postfix_expression {-> New expression.mult(multiplicative_expression.expression, postfix_expression.expression)} |
		{div} multiplicative_expression tok_div postfix_expression {-> New expression.div(multiplicative_expression.expression, postfix_expression.expression)} |
		postfix_expression {-> postfix_expression.expression};

	postfix_expression {-> expression} =
		{collection_initialization_expression} collection_initialization_expression {-> collection_initialization_expression.expression} |
		{function_application_expression} function_application_expression {-> function_application_expression.expression} |
		{swap} kw_swap tok_op_paren [collection]:expression [first_comma]:tok_comma [first_index]:expression [second_comma]:tok_comma [second_index]:expression tok_cl_paren {-> New expression.swap(collection, first_index, second_index)} |
		{update} kw_update tok_op_paren [collection]:expression [first_comma]:tok_comma [index]:expression [second_comma]:tok_comma [value]:expression tok_cl_paren {-> New expression.update(collection, index, value)} |
		{map} kw_map tok_op_paren [collection]:expression [comma]:tok_comma [function]:expression tok_cl_paren {-> New expression.map(collection, function)} |
		{filter} kw_filter tok_op_paren [collection]:expression [comma]:tok_comma [function]:expression tok_cl_paren {-> New expression.filter(collection, function)} |
		{reduce} kw_reduce tok_op_paren [collection]:expression [first_comma]:tok_comma [function]:expression [second_comma]:tok_comma [init]:expression tok_cl_paren {-> New expression.reduce(collection, function, init)} |
		{unary_expression} unary_expression {-> unary_expression.expression};

	function_application_expression {-> expression} =
		{with_argument} [function_identifier]:identifier tok_op_paren expression expression_list* tok_cl_paren {-> New expression.function_application_with_argument(function_identifier, expression, [expression_list.expression])} |
		{without_argument} [function_identifier]:identifier tok_op_paren tok_cl_paren {-> New expression.function_application_without_argument(function_identifier)};

	collection_initialization_expression {-> expression} =
		{empty_vector} kw_vector tok_op_paren tok_cl_paren {-> New expression.empty_vector()} |
		{vector} kw_vector tok_op_paren expression expression_list* tok_cl_paren {-> New expression.vector(expression, [expression_list.expression])} |
		{empty_dict} kw_dict tok_op_paren tok_cl_paren {-> New expression.empty_dict()} |
		{dict} kw_dict tok_op_paren key_value_expression key_value_list tok_cl_paren {-> New expression.dict(key_value_expression.expression, [key_value_list.expression])} |
		{empty_set} kw_set tok_op_paren tok_cl_paren {-> New expression.empty_set()} |
		{set} kw_set tok_op_paren expression expression_list* tok_cl_paren {-> New expression.set(expression, [expression_list.expression])} |
		{empty_list} kw_list tok_op_paren tok_cl_paren {-> New expression.empty_list()} |
		{list} kw_list tok_op_paren expression expression_list* tok_cl_paren {-> New expression.list(expression, [expression_list.expression])};

	key_value_expression {-> expression} = [key]:expression tok_right_arrow [value]:expression {-> New expression.key_value(key, value)};

	key_value_list {-> expression} = tok_comma key_value_expression {-> key_value_expression.expression};

	unary_expression {-> expression} =
		{negative} tok_min primitive_expression {-> New expression.negative(primitive_expression.expression)} |
		{head} tok_excl_gt primitive_expression {-> New expression.head(primitive_expression.expression)} |
		{tail} tok_excl_lt primitive_expression {-> New expression.tail(primitive_expression.expression)} |
		{size} tok_excl_nb primitive_expression {-> New expression.size(primitive_expression.expression)} |
		{primitive_expression} primitive_expression {-> primitive_expression.expression};

	primitive_expression {-> expression} = 
		{paren} tok_op_paren expression tok_cl_paren {-> New expression.paren(expression)} |
		{int} integer {-> New expression.int(integer)} |
		{double} double {-> New expression.double(double)} |
		{identifier} identifier {-> New expression.var(identifier)} |
		{true} kw_true {-> New expression.true(kw_true)} |
		{false} kw_false {-> New expression.false(kw_false)} |
		{null} kw_null {-> New expression.null(kw_null)} |
		{string_literal} string_literal {-> New expression.string_literal(string_literal)} |
		{anonymous_function} anonymous_function_definition_expression {-> anonymous_function_definition_expression.expression};

	anonymous_function_definition_expression {-> expression} =
		{declaration} tok_lambda tok_op_paren tok_right_arrow type_specifier tok_colon anonymous_function_body tok_cl_paren {-> New expression.anonymous_function_without_argument(type_specifier, anonymous_function_body)} |
		{declaration_with_argument} tok_lambda tok_op_paren argument argument_list* tok_right_arrow type_specifier tok_colon anonymous_function_body tok_cl_paren {-> New expression.anonymous_function_with_argument(argument, [argument_list.argument], type_specifier, anonymous_function_body)};

	anonymous_function_body {-> anonymous_function_body} =
		{body} expression {-> New anonymous_function_body.single_expression(expression)} |
		{body_guard} anonymous_function_body_guard anonymous_function_body_guard_list* {-> New anonymous_function_body.body_guard(anonymous_function_body_guard, [anonymous_function_body_guard_list.anonymous_function_body_guard])};

	anonymous_function_body_guard {-> anonymous_function_body_guard} =
		tok_op_square [condition]:expression tok_cl_square [result]:expression {-> New anonymous_function_body_guard(condition, result)};

	anonymous_function_body_guard_list {-> anonymous_function_body_guard} =
		tok_pipe anonymous_function_body_guard {-> anonymous_function_body_guard};

	function_definition =
		{declaration} [function_identifier]:identifier tok_colon tok_right_arrow type_specifier {-> New function_definition.declaration(function_identifier, type_specifier)} |
		{declaration_with_argument} [function_identifier]:identifier tok_colon argument argument_list* tok_right_arrow type_specifier {-> New function_definition.declaration_with_argument(function_identifier, argument, [argument_list.argument], type_specifier)} |
		{body_guard} [function_identifier]:identifier tok_op_square [condition]:expression tok_cl_square tok_colon [result]:expression {-> New function_definition.body_guard(function_identifier, condition, result)} |
		{body} [function_identifier]:identifier tok_colon [result]:expression {-> New function_definition.body(function_identifier, result)};

	argument = type_specifier identifier {-> New argument(type_specifier, identifier)} ;

	argument_list {-> argument} = tok_comma argument {-> argument} ;

	expression_list {-> expression} = tok_comma expression {-> expression};

	type_specifier = 
		{int} kw_int {-> New type_specifier.int()} |
		{bool} kw_bool {-> New type_specifier.bool()} |
		{double} kw_double {-> New type_specifier.double()} |
		{string} kw_string {-> New type_specifier.string()} |
		{date} kw_date {-> New type_specifier.date()} |
		{datetime} kw_datetime {-> New type_specifier.datetime()} |
		{void} kw_void {-> New type_specifier.void()} |
		{any} kw_any {-> New type_specifier.any()} |
		{vector} kw_vector {-> New type_specifier.vector()} |
		{dict} kw_dict {-> New type_specifier.dict()} |
		{set} kw_set {-> New type_specifier.set()} |
		{list} kw_list {-> New type_specifier.list()} |
		{function_type_specifier} function_type_specifier {-> function_type_specifier.type_specifier};

	function_type_specifier {-> type_specifier} =
		{function_type_specifier_no_parameters} tok_right_arrow type_specifier {-> New type_specifier.function_type_specifier_no_parameters(type_specifier)} |
		{function_type_specifier_with_parameters} tok_op_paren [first]:type_specifier type_specifier_list* tok_right_arrow [result]:type_specifier tok_cl_paren {-> New type_specifier.function_type_specifier_with_parameters(first, [type_specifier_list.type_specifier], result)};

	type_specifier_list {-> type_specifier} = tok_comma type_specifier {-> type_specifier} ;

	variable_definition = [variable]:identifier tok_attribution expression {-> New variable_definition(variable, expression)};

Abstract Syntax Tree
	program = line*;

	line =
		{expression_line} expression |
		{function_definition} function_definition |
		{variable_definition} variable_definition;

	expression = 
		{sum} [left]:expression [right]:expression |
		{sub} [left]:expression [right]:expression |
		{mult} [left]:expression [right]:expression |
		{div} [left]:expression [right]:expression |
		{negative} expression |
		{paren} expression |
		{int} integer |
		{double} double |
		{var} identifier |
		{not} expression |
		{xor} [left]:expression [right]:expression |
		{implies} [left]:expression [right]:expression |
		{or} [left]:expression [right]:expression |
		{and} [left]:expression [right]:expression |
		{equal} [left]:expression [right]:expression |
		{different} [left]:expression [right]:expression |
		{greater} [left]:expression [right]:expression |
		{greater_equal} [left]:expression [right]:expression |
		{less} [left]:expression [right]:expression |
		{less_equal} [left]:expression [right]:expression |
		{true} kw_true |
		{false} kw_false |
		{null} kw_null |
		{concat_expression} [left]:expression [right]:expression |
		{remove_expression} [left]:expression [right]:expression |
		{index_expression} [left]:expression [right]:expression |
		{head} expression |
		{tail} expression |
		{size} expression |
		{string_literal} [string]:string_literal |
		{key_value} [key]:expression [value]:expression |
		{empty_vector} |
		{vector} [first]:expression [rest]:expression* |
		{empty_dict} |
		{dict} [first]:expression [rest]:expression* |
		{empty_set} |
		{set} [first]:expression [rest]:expression* |
		{empty_list} |
		{list} [first]:expression [rest]:expression* |
		{swap} [collection]:expression [first_index]:expression [second_index]:expression |
		{update} [collection]:expression [index]:expression [value]:expression |
		{map} [collection]:expression [function]:expression |
		{filter} [collection]:expression [function]:expression |
		{reduce} [collection]:expression [function]:expression [init]:expression |
		{function_application_with_argument} [function_identifier]:identifier [first]:expression [rest]:expression* |
		{function_application_without_argument} [function_identifier]:identifier |
		{anonymous_function_without_argument} [return_type]:type_specifier [body]:anonymous_function_body |
		{anonymous_function_with_argument} [first]:argument [rest]:argument* [return_type]:type_specifier [body]:anonymous_function_body;

		anonymous_function_body =
			{single_expression} expression |
			{body_guard} [first]:anonymous_function_body_guard [rest]:anonymous_function_body_guard*;

		anonymous_function_body_guard =
			[condition]:expression [result]:expression;

	type_specifier = 
		{int} |
		{bool} |
		{double} |
		{string} |
		{date} |
		{datetime} |
		{void} |
		{any} |
		{vector} |
		{dict} |
		{set} |
		{list} |
		{function_type_specifier_no_parameters} [result]:type_specifier |
		{function_type_specifier_with_parameters} [first]:type_specifier [rest]:type_specifier* [result]:type_specifier;

	function_definition = 
		{declaration} [function_identifier]:identifier [return_type]:type_specifier |
		{declaration_with_argument} [function_identifier]:identifier [first]:argument [rest]:argument* [return_type]:type_specifier |
		{body_guard} [function_identifier]:identifier [condition]:expression [result]:expression |
		{body} [function_identifier]:identifier [result]:expression;

	variable_definition = [variable]:identifier expression;

	argument = type_specifier identifier;
